#if !canImport(ObjectiveC)
import XCTest

extension ConstraintDeadlineTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConstraintDeadlineTests = [
        ("testDeadlineAfterSchedule", testDeadlineAfterSchedule),
        ("testDeadlineBasic", testDeadlineBasic),
        ("testDeadlineWhenDeserialize", testDeadlineWhenDeserialize),
        ("testDeadlineWhenRun", testDeadlineWhenRun),
        ("testDeadlineWhenSchedule", testDeadlineWhenSchedule),
        ("testDelay", testDelay)
    ]
}

extension ConstraintNetworkTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConstraintNetworkTests = [
        ("testNetworkConstraint", testNetworkConstraint),
        ("testNetworkConstraintWifi", testNetworkConstraintWifi)
    ]
}

extension ConstraintTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConstraintTests = [
        ("testCancelRunningOperation", testCancelRunningOperation),
        ("testCancelRunningOperationByTag", testCancelRunningOperationByTag),
        ("testChargingConstraintShouldRunNow", testChargingConstraintShouldRunNow),
        ("testPeriodicJob", testPeriodicJob),
        ("testPeriodicJobUnlimited", testPeriodicJobUnlimited),
        ("testRepeatableJobWithDelay", testRepeatableJobWithDelay),
        ("testRepeatableJobWithExponentialBackoffRetry", testRepeatableJobWithExponentialBackoffRetry),
        ("testRetryFailJobWithCancelConstraint", testRetryFailJobWithCancelConstraint),
        ("testRetryFailJobWithExponentialConstraint", testRetryFailJobWithExponentialConstraint),
        ("testRetryFailJobWithRetryConstraint", testRetryFailJobWithRetryConstraint),
        ("testRetryFailJobWithRetryDelayConstraint", testRetryFailJobWithRetryDelayConstraint),
        ("testRetryUnlimitedShouldRetryManyTimes", testRetryUnlimitedShouldRetryManyTimes)
    ]
}

extension ConstraintUniqueUUIDTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConstraintUniqueUUIDTests = [
        ("testUniqueIdConstraintShouldCancelTheFirst", testUniqueIdConstraintShouldCancelTheFirst),
        ("testUniqueIdConstraintShouldCancelTheSecond", testUniqueIdConstraintShouldCancelTheSecond)
    ]
}

extension LoggerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LoggerTests = [
        ("testLoggerLevel", testLoggerLevel),
        ("testRunSuccessJobLogger", testRunSuccessJobLogger)
    ]
}

extension PersisterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PersisterTests = [
        ("testCancelAllShouldRemoveFromPersister", testCancelAllShouldRemoveFromPersister),
        ("testCancelWithTagShouldRemoveFromPersister", testCancelWithTagShouldRemoveFromPersister),
        ("testCompleteFailTaskRemoveFromSerializer", testCompleteFailTaskRemoveFromSerializer),
        ("testCompleteJobRemoveFromSerializer", testCompleteJobRemoveFromSerializer),
        ("testCustomSerializer", testCustomSerializer),
        ("testLoadSerializedSortedJobShouldRunSuccess", testLoadSerializedSortedJobShouldRunSuccess),
        ("testNonPersistedJobShouldNotBePersisted", testNonPersistedJobShouldNotBePersisted),
        ("testScheduleWhileDeserialize", testScheduleWhileDeserialize)
    ]
}

extension StartStopTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StartStopTests = [
        ("testSchedulePeriodicJobThenStart", testSchedulePeriodicJobThenStart),
        ("testScheduleWhenQueueStop", testScheduleWhenQueueStop)
    ]
}

extension SwiftQueueBuilderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftQueueBuilderTests = [
        ("testBuilderAddTag", testBuilderAddTag),
        ("testBuilderDeadlineCodable", testBuilderDeadlineCodable),
        ("testBuilderDeadlineV1", testBuilderDeadlineV1),
        ("testBuilderDelay", testBuilderDelay),
        ("testBuilderGroup", testBuilderGroup),
        ("testBuilderInternetAny", testBuilderInternetAny),
        ("testBuilderInternetCellular", testBuilderInternetCellular),
        ("testBuilderInternetWifi", testBuilderInternetWifi),
        ("testBuilderJobType", testBuilderJobType),
        ("testBuilderPeriodicLimited", testBuilderPeriodicLimited),
        ("testBuilderPeriodicUnlimited", testBuilderPeriodicUnlimited),
        ("testBuilderRequireCharging", testBuilderRequireCharging),
        ("testBuilderRetryLimited", testBuilderRetryLimited),
        ("testBuilderRetryUnlimited", testBuilderRetryUnlimited),
        ("testBuilderSingleInstance", testBuilderSingleInstance),
        ("testBuilderSingleInstanceOverride", testBuilderSingleInstanceOverride),
        ("testBuilderWith", testBuilderWith),
        ("testBuilderWithFreeArgs", testBuilderWithFreeArgs)
    ]
}

extension SwiftQueueManagerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftQueueManagerTests = [
        ("testAddOperationNotJobTask", testAddOperationNotJobTask),
        ("testCancelAll", testCancelAll),
        ("testCancelWithTag", testCancelWithTag),
        ("testCancelWithUUID", testCancelWithUUID),
        ("testLimitEquatable", testLimitEquatable),
        ("testRunSuccessJob", testRunSuccessJob)
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ConstraintDeadlineTests.__allTests__ConstraintDeadlineTests),
        testCase(ConstraintNetworkTests.__allTests__ConstraintNetworkTests),
        testCase(ConstraintTests.__allTests__ConstraintTests),
        testCase(ConstraintUniqueUUIDTests.__allTests__ConstraintUniqueUUIDTests),
        testCase(LoggerTests.__allTests__LoggerTests),
        testCase(PersisterTests.__allTests__PersisterTests),
        testCase(StartStopTests.__allTests__StartStopTests),
        testCase(SwiftQueueBuilderTests.__allTests__SwiftQueueBuilderTests),
        testCase(SwiftQueueManagerTests.__allTests__SwiftQueueManagerTests)
    ]
}
#endif
